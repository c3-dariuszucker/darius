# Battleship Fortran

A classic Battleship game implementation written in modern Fortran. This project delivers a fully-featured, terminal-based battleship game with both player vs AI and AI vs AI gameplay modes. The game features a traditional 10x10 grid system where players strategically place their ships and attempt to sink their opponent's fleet through coordinate-based attacks.

## Key Features

- Complete implementation of the classic Battleship game rules
- Interactive command-line interface with ASCII art logo and grid displays
- Two game modes: Player vs AI and AI vs AI (automated battle)
- Advanced AI opponent with multiple targeting strategies
  - Random firing in early stages
  - Strategic targeting once ships are detected
  - Pattern-based scanning to locate remaining vessels
- Side-by-side grid display showing both defense (your ships) and offense (your attacks)
- Manual and automatic ship placement options
- Real-time score tracking and ship health monitoring
- Cross-platform compatibility with proper terminal display

# Layout and Architecture
```
└── darius
    └── c3-dariuszucker-darius-ee4ee60
        ├── main.f90             # Main program with game logic and player interactions
        ├── battleships.f90      # Module with game mechanics, ship types and AI logic
        ├── misc.f90             # Utility functions for character/string operations
        ├── sleep.c              # C binding for system pause functionality
        ├── CMakeLists.txt       # Build configuration
        ├── fpm.toml            # Fortran Package Manager configuration
        ├── LICENSE
        └── README.md
```

```mermaid
graph TD
    subgraph battleship-fortran
        A[main.f90] --> B[battleships_game]
        B --> C{Game Mode}
        C -->|Player vs AI| D[Interactive Game]
        C -->|AI vs AI| E[Automated Battle]
        B --> F[Utility Functions]

        subgraph "Entry Point"
            A
        end

        subgraph "Core Program"
            B
        end

        subgraph "Game Modes"
            D
            E
        end

        subgraph "Utilities"
            F
        end
    end

    B -.-> main_menu["main_menu()"]
    D -.-> battleships_mod["battleships_mod (Module)"]
    D -.-> grid_display["grid_1(), grid_2()"]
    D -.-> ship_placement["shipdata(), ranship()"]
    D -.-> combat["identify(), ai()"]
    E -.-> ai_battle["ai() vs ai()"]
    F -.-> misc_mod["misc_mod (Module)"]
    F -.-> sleep["sleep() (C binding)"]
    F -.-> conversions["convert_char2num(), convert_num2char()"]
```

# Usage Examples

## Building and Running

### Building with CMake

```bash
# Create build directory
mkdir build
cd build

# Configure the build
cmake ..

# Compile the game
cmake --build build
```

### Building with FPM (Fortran Package Manager)

```bash
# Build the project using FPM
fpm build
```

### Running the Game

```bash
# Run the compiled executable (if built with CMake)
./build/battleships

# Or run directly with FPM
fpm run
```

## Game Controls

### Main Menu Navigation

```
# Select an option from Main Menu:
1 - Place your ships
2 - Begin battle!
3 - Watch an automated battle
4 - About
```

### Ship Placement

```
# When placing ships, enter coordinates:
A1    # Format: [A-J][1-10]

# Then select direction:
N     # N = North, E = East, S = South, W = West

# Random ship placement:
7     # Select option 7 from the ship placement menu
```

### Battle Targeting

```
# When attacking during battle, enter coordinates:
E5    # Format: [A-J][1-10]
```

## Module Usage

### Setting Up Game State

```fortran
! Initialize game boards
CHARACTER (LEN=2), DIMENSION(1:10,1:10) :: defence = CB//CB
CHARACTER (LEN=1), DIMENSION(1:10,1:10) :: offence = CB

! Set up ship arrays
TYPE(ship), DIMENSION(1:5) :: player1, player2

! Setup ship properties
player1(1)%nu = 'D'; player1(1)%nl = 'd'; player1(1)%l = 2 ! Destroyer
player1(2)%nu = 'C'; player1(2)%nl = 'c'; player1(2)%l = 3 ! Cruiser
player1(3)%nu = 'S'; player1(3)%nl = 's'; player1(3)%l = 3 ! Submarine
player1(4)%nu = 'B'; player1(4)%nl = 'b'; player1(4)%l = 4 ! Battleship
player1(5)%nu = 'A'; player1(5)%nl = 'a'; player1(5)%l = 5 ! Aircraft Carrier
```

### Grid Display

```fortran
! Display player's defense grid
CALL grid_1(defence, 'd')

! Display both defense and offense grids side by side
CALL grid_2(defence, offence)
```

### Ship Placement

```fortran
! Place a ship on the grid manually
CALL shipdata(player1(1), defence, error_grid, error_collision)
IF(error_grid == 0 .AND. error_collision == 0) THEN
  CALL setship(player1(1), defence)
END IF

! Place ships randomly
CALL ranship(player1, defence)
```

### AI Opponent

```fortran
! Initialize AI data structure
TYPE(ai_saved_data) :: ai_data

! Have the AI make a move
CALL ai(defence, player1, p1sunk, hits, 2, delay, ai_data, health)
```

## Scoreboard & UI

```fortran
! Setup and display the scoreboard
TYPE(scoreboard_entity), DIMENSION(1:2) :: hits
hits_title = 'Score'
hits(1)%n = 'Player 1'; hits(1)%s = 0; hits(1)%t = 5
hits(2)%n = 'Player 2'; hits(2)%s = 0; hits(2)%t = 5
CALL scoreboard(hits_title, hits)

! Display the game logo
CALL logo()
```

## Utility Functions

```fortran
! Convert between coordinate systems
CHARACTER :: column = 'A'
INTEGER :: col_num
CALL convert_char2num(column, col_num)  ! 'A' -> 1

! Convert integer to character
INTEGER :: x = 5
CHARACTER :: col_char
CALL convert_num2char(x, col_char)  ! 5 -> 'E'

! Convert a lowercase letter to uppercase
CHARACTER :: letter = 'a'
letter = toUpper(letter)  ! 'a' -> 'A'

! Add a delay (in milliseconds)
CALL sleep(500)  ! Pause for 500ms
```

# Key Feature Implementation Deep Dive - Battleship Fortran

This document explores the key features of the Battleship Fortran implementation, explaining how they work and how they fit together in the repository structure. Understanding these core features will help developers maintain, improve, or extend the game's functionality.

## Key Feature 1: AI Opponent Implementation

The AI opponent is one of the most complex and important features of the game, implemented as a multi-stage targeting system that progressively gets smarter as it scores hits.

### Implementation Overview

The AI system is implemented in the `ai` subroutine in `battleships.f90`, which uses a state machine approach with multiple targeting strategies:

1. **Random Targeting (Stage 1)**: Initially selects random coordinates to fire at
2. **Adjacent Scanning (Stage 2)**: After a hit, scans adjacent cells in cardinal directions
3. **Linear Targeting (Stage 3)**: After finding multiple hits, fires along the determined ship orientation

### Key Components

- **AI State Persistence**: Uses `ai_saved_data` type to maintain state between turns
  ```fortran
  TYPE ai_saved_data
    INTEGER :: stage, pass, scan_stage, start, clock, pos, line_pos
    INTEGER, DIMENSION(1:2) :: centre, try
    INTEGER, DIMENSION(1:4,1:2) :: adjacent
    INTEGER, DIMENSION(-4:4,1:2) :: line
    LOGICAL :: first_time = .TRUE.
  END TYPE ai_saved_data
  ```

- **Progressive Logic Flow**:
  ```fortran
  SELECT CASE(ai_data%stage)
    CASE (1) ! Random targeting
      ! Select random coordinates, check if already fired on
      ! If hit, record position and transition to stage 2
    CASE (2) ! Adjacent scanning
      ! Try adjacent cells to find ship orientation
      ! If second hit found, transition to stage 3
    CASE (3) ! Linear targeting
      ! Fire along the line determined by the hits
      ! Continue until ship is sunk or all valid positions checked
  END SELECT
  ```

- **Ship Identification and Sinking**: Uses the `identify` subroutine to determine which ship was hit and if it was sunk
  ```fortran
  CALL identify(p0t, enemy, hit_ship, sunk)
  ```

### Integration Points

- The AI is called from the main game loop in `main.f90` during Player 2's turn
- It maintains state between turns through the `ai_data` parameter
- It can operate in different modes (vs. player or vs. another AI)
- The AI's view of the game board is separate from the game state, mimicking a human player who must remember their own moves

## Key Feature 2: Ship Placement and Grid Management

This feature handles the placement of ships on the game grid, including user input validation, collision detection, and visualization.

### Implementation Overview

The ship placement system consists of several interconnected subroutines in `battleships.f90`:

1. **User Input**: `shipdata` collects input coordinates and orientation
2. **Validation**: `checkship_grid` and `checkship_collision` validate placement
3. **Grid Management**: `setship` and `clearship` update the grid state
4. **Random Placement**: `ranship` handles automatic ship placement

### Key Components

- **Ship Data Structure**: 
  ```fortran
  TYPE ship
    INTEGER :: x, y, l, h  ! Position, length, and hits
    CHARACTER (LEN=1) :: z, nu, nl, s  ! Direction, symbols, state
    CHARACTER (LEN=16) :: n  ! Name
  END TYPE ship
  ```

- **Grid Boundary Check**:
  ```fortran
  SUBROUTINE checkship_grid(boat, c)
    ! Checks if a ship's placement keeps it within the 10x10 grid
    ! based on its position, length, and orientation
    SELECT CASE (boat%z)
      CASE ('N')  ! Check if ship extends beyond north edge
      CASE ('E')  ! Check if ship extends beyond east edge
      CASE ('S')  ! Check if ship extends beyond south edge
      CASE ('W')  ! Check if ship extends beyond west edge
    END SELECT
  END SUBROUTINE
  ```

- **Ship Collision Detection**:
  ```fortran
  SUBROUTINE checkship_collision(boat, array, c)
    ! Examines if there are already ships in the target positions
    ! by checking the character at each position the ship would occupy
  END SUBROUTINE
  ```

- **Smart Random Placement**:
  ```fortran
  SUBROUTINE ranship(boats, array)
    ! Places ships randomly on the grid starting with longest ship
    ! Sorts ships by length before placement to optimize the process
    CALL sort_1d(lengths, 'd')  ! Sort ships by descending length
  END SUBROUTINE
  ```

### Integration Points

- Used in `main.f90` during the ship placement menu (option 1)
- Works with both manual placement through user input and automatic placement
- Seamlessly integrates with the grid display system to immediately show placement results
- Passes error status back to the main program for user feedback

## Key Feature 3: Grid Visualization System

The grid visualization system provides intuitive representations of the game state, including both player's grids, ship positions, and attack results.

### Implementation Overview

The grid visualization is handled by three key subroutines in `battleships.f90`:

1. **grid_1**: Displays a single grid (defense or offense)
2. **grid_2**: Displays two grids side by side for gameplay
3. **scoreboard**: Shows game statistics like hits and ship health

### Key Components

- **Grid Character Constants**:
  ```fortran
  CHARACTER, PARAMETER :: CH = '*', CM = '.', CB = ' ', CN = '0', 
                          GSV = '|', GSH = '=', GC = '+'
  ```
  
- **Side-by-Side Grid Display**:
  ```fortran
  SUBROUTINE grid_2(a1, a2)
    ! a1 is defense grid, a2 is offense grid
    ! Displays headers and coordinates
    ! Shows compass directions for defense grid
    ! Formats both grids side by side with proper spacing
  END SUBROUTINE
  ```

- **Single Grid Display with Context**:
  ```fortran
  SUBROUTINE grid_1(a1, a)
    ! a1 is grid data, a is grid type ('d' for defense, 'o' for offense, 'c' for computer)
    ! Formats differently based on grid type
    ! Adds compass directions for defense grid only
  END SUBROUTINE
  ```

- **Scoreboard for Statistics**:
  ```fortran
  SUBROUTINE scoreboard(title, entities)
    ! Displays score information with a title
    ! Shows current and total values for each entity
  END SUBROUTINE
  ```

### Integration Points

- Called from the main game loop to refresh the display after each turn
- Integrates with the ship placement system to visualize ship positions
- Uses utility functions from `misc_mod` for character conversions
- Works with both human and AI players to maintain appropriate "fog of war"

## How These Features Work Together

1. The **ship placement system** populates the initial game state by setting up the grid data structures with ship positions.

2. The **grid visualization system** renders this state to the console in an intuitive format for the player.

3. During gameplay, the **AI opponent** analyzes the grid state, makes targeting decisions, and updates the game state with hits and misses.

4. The **grid visualization** then shows the updated game state, including attack results.

5. This cycle continues until one player (human or AI) sinks all the opponent's ships.

The modular design with separate subroutines for each concern allows for good separation of game logic, visualization, and AI behavior.

## Extending the Implementation

To add new features to the game:

1. **For new ship types**: Modify the ship type initialization in `main.f90` to include additional ships with different properties.

2. **For new AI strategies**: Add new case blocks in the `ai` subroutine in `battleships.f90`.

3. **For UI improvements**: Enhance the grid display subroutines in `battleships.f90`.

4. **For new game modes**: Add options to the main menu in `main.f90` and implement the corresponding gameplay logic.

The modular structure of the codebase makes it relatively straightforward to modify specific parts without disrupting the overall functionality.

# Implemented User Storys

## Game Setup and Interface
- [ ] As a player, I want to see an ASCII art logo of the game when I start, so that I feel immersed in the battleship theme.
- [ ] As a player, I want to access a main menu with clearly labeled options, so that I can easily navigate the game.
- [ ] As a player, I want to see a help section explaining the rules and ship placement, so that I can learn how to play the game.
- [ ] As a player, I want to view information about the game developers and references, so that I can appreciate the credits.
- [ ] As a player, I want the screen to clear between actions, so that the interface remains clean and readable.
- [ ] As a player, I want to see both my defense and offense grids side by side, so that I can track my ships and attacks simultaneously.
- [ ] As a player, I want to see compass directions (N, E, S, W) on my defense grid, so that I can orient ship placements easily.

## Ship Management
- [ ] As a player, I want to manually place my five ships (Destroyer, Cruiser, Submarine, Battleship, Aircraft Carrier) on the grid, so that I can strategically position my fleet.
- [ ] As a player, I want to specify the bow coordinates and direction of my ships, so that I can control their exact placement on the grid.
- [ ] As a player, I want to receive error messages when my ship placement is invalid (off-grid or overlapping), so that I can correct my placement.
- [ ] As a player, I want the option to automatically assign random positions for my ships, so that I can start playing quickly.
- [ ] As a player, I want to clear the current ship arrangement and start over, so that I can try different strategic layouts.

## Gameplay
- [ ] As a player, I want to target specific coordinates on the opponent's grid to fire shots, so that I can try to hit their ships.
- [ ] As a player, I want immediate feedback whether my shot was a hit or miss, so that I can plan my next move.
- [ ] As a player, I want to be notified when I've sunk an enemy ship, so that I can track my progress.
- [ ] As a player, I want to see my attack history on the offense grid with different symbols for hits and misses, so that I can avoid repeating shots.
- [ ] As a player, I want to see an updated scoreboard after each round, so that I can track both players' progress.
- [ ] As a player, I want to see the health status of my ships, so that I can monitor which ships are in danger.
- [ ] As a player, I want to be notified when the game is over (win, lose, or draw), so that I can know the final outcome.

## AI Opponent
- [ ] As a player, I want to play against an AI opponent with progressive targeting strategies, so that I face a challenging adversary.
- [ ] As a player, I want the AI to use intelligent targeting when it gets a hit (searching adjacent spaces), so that the computer opponent feels realistic.
- [ ] As a player, I want the AI to track the orientation of ships once multiple hits are registered, so that it provides a challenging experience.
- [ ] As a player, I want the option to add delays between AI actions, so that I can follow the game progression more easily.

## Game Modes
- [ ] As a player, I want to engage in a player versus AI battle mode, so that I can test my skills against the computer.
- [ ] As a spectator, I want to watch an automated battle between two AI opponents, so that I can enjoy the game without participating.
- [ ] As a player, I want to configure game settings like delays and seed values, so that I can customize my game experience.

## Configuration and System
- [ ] As a player, I want the game to save and load configuration settings from a file, so that my preferences persist between sessions.
- [ ] As a player, I want the game to handle unexpected or invalid inputs gracefully, so that the game doesn't crash during play.
- [ ] As a player, I want the game to run on multiple operating systems with different Fortran compilers, so that I can play regardless of my system.